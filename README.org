#+TITLE:Robby: Extensible Emacs Interface to OpenAI

[[./images/robby.png]]

* Overview
Robby provides an extensible Emacs interface to OpenAI. It provides basic commands to use OpenAI with regions, the minibuffer, and help windows. It also provides a mechanism for defining your own interactive AI commands, and to save the last executed command as a reusable custom AI command. 
* Requirements
- Emacs 28.1 or higher
- [[https://github.com/tkf/emacs-request][emacs-request]] version 0.0.1 or higher
- [[https://github.com/Malabarba/spinner.el][spinner.el]] version 1.7.2 or higher
- [[https://github.com/magit/transient][transient]] version 0.4.1 or higher.

  Note that the required transient version is more recent that the version included in Emacs 29 (0.4.0 vs 0.4.1). Robby requires a bug fix included in the 0.4.1 version of transient. 
* Installation
** API Key
You need an [[https://platform.openai.com/account/api-keys][OpenAI API key]] to use ~robby~.  You can set ~robby-openai-api-key~ to the key, or set it to a function that returns the key. By default ~robby-openai-api-key~ is set to the function ~robby-get-api-key-from-auth-source~ which reads from =~/.authinfo=. You need to add a line to that file that looks like this:

#+begin_src sh
machine api.openai.com login apikey password OPENAI_API_KEY
#+end_src

For instructions on using keys securely within Emacs using GPG see the "Mastering Emacs" article  [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs with GnuPG and Auth Sources]]. Robby will alternately decrypt and read the API key from the encrypted =~/.authinfo.gpg= if you have set that up. This is what I do.
** Straight.el
To install using ~straight.el~ add code like this to your Emacs initialization file:

#+begin_src emacs-lisp
(use-package robby 
 :straight (:type git :host github :repo "stevemolitor/robby" :branch "main")
  :bind-keymap
  ;; optionally bin a prefix key to the robby-command-map,
  ;; default is "C-c C-r":
  ("s-r" . robby-command-map))
#+end_src
** Manual Installation
*** Prerequisites
First install these packages via ~package-install~:
- =emacs-request=
- =spinner=
- =transient= version =0.4.1= or higher
*** Install
Next, clone the ~robby~ repo and put its root diretory in your load path, set your api key, and optionally custom the keymap prefix key:

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/path-to-robby")
  (require 'robby)
    (require 'robby)
  ;; optional, default is "C-c C-r":
  (global-set-key (kbd "s-r") robby-command-map)
#+end_src
* Usage
** Built In Commands
robby comes with the following built-in commands:
*** ~robby-message~
Ask for a prompt in the minibuffer, send the prompt to OpenAI, display response in minibuffer. Maintain conversational history of previous prompts and responses, up to ~robby-max-history~ prompt / response pairs. 
*** ~robby-prepend-region~
Query AI from region, prefix region with response.
If no selected region read prompt from buffer content.
*** ~robby-append-region~
Query AI from region, prefix region with response.
If no selected region read prompt from buffer content.
*** ~robby-replace-region~
Query AI from region, prefix region with response.
If no selected region read prompt from buffer content.
*** ~robby-view~
Query AI from region, respond in read-only markdown view window. If no selected region
read prompt from buffer content. Maintain conversational history of previous prompts and
responses, up to ~robby-max-history~ prompt / response pairs.
** Defining Custom Commands
The interactive command ~robby-insert-last-command~ will prompt for a command name and doc string, and then insert Emacs lisp code that defines the command permanently. You can run commands like ~robby-replace-region~ repeatedly, experimenting with different prompts until you get one that works, and then save the results permanently for use as custom command. Here are some examples:

#+begin_src emacs-lisp
(robby-define-command
 robby-write-tests
 "Write some tests for the code in the region, append to region."
 :historyp nil
 :prompt "Write some unit tests for this code: "
 :action robby--append-response-after-region)

(robby-define-command
 robby-add-comment
 "Write a documentation comment for the code in the selected region, prepending comment to the region."
 :historyp nil
 :prompt "Write a documentation comment for this code: "
 :action robby--prepend-response-to-region)

(robby-define-command
 robby-fix-code
 "Fix the code in the selected region, replace region with fixed code."
 :historyp nil
 :prompt "Fix this code: "
 :action robby--replace-region-with-response)

(robby-define-command
 robby-describe-code
 "Describe code in the selected region, show description in help window."
 :historyp nil
 :prompt "Describe the following code: "
 :action robby--show-response-in-help-window)
#+end_src

You can then bind these commands to custom keys or add to the ~robby-keymap~.
*** Custom Command Options
You pass custom OpenAI API options in the ~:options~ property list when defining a custom command. For example this command sets the OpenAI  ~max_tokens~ property to ~2000~, just for this command:

#+begin_src emacs-lisp
(robby-define-command
 robby-describe-code
 "Describe code in the selected region, show description in help window."
 :historyp nil
 :prompt "Describe the following code: "
 :action robby--show-response-in-help-window
 :options '(:max-tokens 2000))
#+end_src

* Customization
Use ~customize-group~ | ~robby~ to see the various customization options. Here are a few important ones:
- ~robby-api~ :: Which OpenAI api to use. "chat" and "completions" are supported.
- ~robby-chat-api~ :: customization group with options to pass to the Chat API.
- ~robby-chat-model~ :: the model to use with the Chat API, for example "gpt-4" or "gpt-3.5-turbo". 
- ~robby-completions-api~ :: customization group with options to pass to the Chat API.
- ~robby-completions-model~ :: the model to use with the Chat API, for example "text-davinci-003".
- ~robby-chat-max-tokens~, ~robby-completions-max-tokens~ ::  The maximum number of tokens to return in the response. The Robby default is ~300~, but you may want to increase this for longer responses.
* Demos
** ~robby-prepend-region~
[[./images/robby-prepend-region.gif]]
** ~robby-replace-region~
 [[./images/robby-replace-region.gif]]
** ~robby-append-region~
[[./images/robby-append-region.gif]]
** ~robby-message~ with Conversation History
[[./images/robby-message.gif]]
